#OBSERVER PATTERN
Uloga Observer paterna je da uspostavi relaciju izmeðu objekata tako kada jedan objekat promijeni stanje, drugi zainteresirani objekti se obavještavaju.
Observer pattern se koristi ukoliko postoje jedna-na-više veze izmeðu objekata takve da ako se jedan objekat modifikuje, ostali æe biti obavješteni automatski. Observer koristi tri actor klase: subjekat, observer i objekat. Observer nadzire subjekat i svaki put kad se on promijeni obavještavaju se objekti.

Konkretno u nasem projektu je moguce iskoristiti Observer patern prilikom azuriranja cijene kreacije, na nacin da kad se na kreaciju odabere odreðeni materijal, dezen ili se iskoristi opcija "Pitaj stilistu" nova cijena kreacije se prikazuje korisniku
Takoðe, Observer mozemo iskoristiti prilikom obavjestavanja korisnika koji je izvrsio narudzbu preko 150KM o ostvarenoj pogodnosti - poklonu.

#ITERATOR PATTERN
Iterator patern omoguæava sekvencijalni pristup elementima kolekcije bez poznavanja kako je kolekcija strukturirana.
Pored toga, patern omoguæava filtriranje elemenata na razlièite naèine. 
Nacin koristenja ovog paterna sastoji se u tome da se u zeljenoj klasi dodamo metodu createIterator() koja pravi iterator klasu, omoguciti tom iteratoru prolazak kroz kolekciju i dodati odgovarajuce metode kao sto su first(), last(), next() radi lakseg rada

U nasem projektu se patern Iterator moze iskoristiti kod pretraga, posto, u zavisnosti od vrste pretrage, kao rezultat dobijamo liste odjece. Radi lakse kretanja kroz te liste, kao i pristuta njenim elementima, pogodno je koristiti iterator.

#SINGLETON
Singleton pattern ogranièava instanciranje klase i osigurava da samo jedna instanca date klase
postoji i pruža globalnu taèku pristupa ka toj instanci. Patern osigurava da je klasa instancirana samo
jednom i da su svi zahtevi upuæeni ka tom jednom i samo jednom objektu.
Modifikacije su:
- kreiramo konstruktor kao private
- dodamo private static objekat koji je interno instanciran korišæenjem private konstruktora
- dodajemo public staitc properti koji pristupa private objektu
Javni properti je jedini vidljiv izvan klase. Svi zahtevi za kreiranjem instance klase idu kroz ovaj
properti. On pristupa privatnom static objektu i instancira ga ukoliko on veæ ne postoji.
U nasoj aplikaciji, Singleton bi se mogao primjeniti kod baze, kao i kod kviza, koji predstavlja sistem za koji je potrebna samo jedna instanca te klase. 